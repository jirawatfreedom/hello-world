{"version":3,"sources":["logo.svg","actions/toDoList.js","constant/toDoList.js","components/ToDo.jsx","containers/ToDoList.jsx","App.js","serviceWorker.js","reducers/todoList.js","reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","addToDoList","toDo","type","payload","name","updateToDoType","index","status","deleteToDoList","id","ToDoStyle","styled","_templateObject","props","ToDo","handleDelete","console","log","_this","handleDone","_this2","this","react_default","a","createElement","onClick","React","Component","connect","dispatch","bindActionCreators","_ref","toDoListReducer","toDoList","map","components_ToDo","key","App","state","handleInput","event","_event$target","target","value","setState","Object","defineProperty","handleSubmit","preventDefault","className","src","logo","alt","onSubmit","onChange","containers_ToDoList","Boolean","window","location","hostname","match","initialState","combineReducers","arguments","length","undefined","action","toConsumableArray","concat","filter","i","_action$payload","objectSpread","store","createStore","rootReducer","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4ef3087.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {\n  ADD_TODO_LIST,\n  DELETE_TODO_LIST,\n  UPDATE_TODO_TYPE\n} from \"../constant/toDoList\";\n\nexport const addToDoList = toDo => {\n  return {\n    type: ADD_TODO_LIST,\n    payload: {\n      name: toDo,\n      type: \"DOING\"\n    }\n  };\n};\nexport const updateToDoType = (index, status) => {\n  return {\n    type: UPDATE_TODO_TYPE,\n    payload: {\n      index,\n      type: status\n    }\n  };\n};\n\nexport const deleteToDoList = id => {\n  return {\n    type: DELETE_TODO_LIST,\n    payload: id\n  };\n};\n","export const ADD_TODO_LIST = \"ADD_TODO_LIST\";\nexport const DELETE_TODO_LIST = \"DELETE_TODO_LIST\";\nexport const UPDATE_TODO_TYPE = \"UPDATE_TODO_TYPE\";\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { deleteToDoList, updateToDoType } from \"../actions/toDoList\";\n\nconst ToDoStyle = styled.p`\n  color: ${props => (props.type === \"DOING\" ? \"blue\" : \"green\")};\n`;\n\nclass ToDo extends React.Component {\n  handleDelete = id => {\n    console.log(id);\n    this.props.deleteToDoList(id);\n  };\n\n  handleDone = id => {\n    console.log(id);\n    this.props.updateToDoType(id, \"DONE\")    \n  };\n\n  render() {\n    const { id } = this.props;\n    return (\n      <li>\n        <ToDoStyle type={this.props.toDo.type}>\n          {this.props.toDo.name}\n        </ToDoStyle>\n        {this.props.toDo.type === \"DOING\" && (\n         <button onClick={() => this.handleDone(id)}>Mark As Done</button>\n        )}\n        <button onClick={() => this.handleDelete(id)}>Delete</button>\n      </li>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      deleteToDoList,\n      updateToDoType\n    },\n    dispatch\n  );\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ToDo);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ToDo from \"../components/ToDo\";\n\nconst ToDoList = props => {\n    return (\n        <ul>\n            {props.toDoListReducer.toDoList.map((toDoList, index) => (\n                <ToDo id={index} key={index} toDo={toDoList} />\n            ))}\n        </ul>\n    );\n}\nconst mapStateToProps = ({ toDoListReducer }) => {\n    return { toDoListReducer };\n}\n\nexport default connect(mapStateToProps)(ToDoList);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport logo from \"./logo.svg\";\nimport { bindActionCreators } from \"redux\";\nimport { addToDoList } from \"./actions/toDoList\";\nimport \"./App.css\";\nimport ToDoList from \"./containers/ToDoList\";\nclass App extends Component {\n  state = {\n    toDo: \"\"\n  };\n\n  handleInput = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.addToDoList(this.state.toDo);\n    this.setState({ toDo: \"\" });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>To Do List</h1>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              name=\"toDo\"\n              value={this.state.toDo}\n              onChange={this.handleInput}\n            />\n            <button type=\"submit\">Submit</button>\n          </form>\n          <ToDoList />\n        </header>\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      addToDoList\n    },\n    dispatch\n  );\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_TODO_LIST,\n  DELETE_TODO_LIST,\n  UPDATE_TODO_TYPE\n} from \"../constant/toDoList\";\nconst initialState = {\n  toDoList: []\n};\nexport const toDoListReducer = (state = initialState, action) => {\n  const { type } = action;\n  switch (type) {\n    case ADD_TODO_LIST:\n      return {\n        toDoList: [...state.toDoList, action.payload]\n      };\n    case DELETE_TODO_LIST:\n      const newTodoList = state.toDoList.filter((value, index) => {\n        return index !== action.payload;\n      });\n      return {\n        toDoList: newTodoList\n      };\n    case UPDATE_TODO_TYPE:\n      return {\n        toDoList: state.toDoList.map((value, i) => {\n          const { index, type } = action.payload;\n          if (i === index) {\n            return { ...value, type };\n          }\n          return value;\n        })\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { toDoListReducer } from \"./todoList\";\n\nexport default combineReducers({\n  toDoListReducer\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}