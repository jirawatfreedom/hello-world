{"version":3,"sources":["logo.svg","actions/toDoList.js","constant/toDoList.js","components/ToDo.jsx","containers/ToDoList.jsx","App.js","serviceWorker.js","reducers/todoList.js","reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","addToDoList","toDo","type","payload","ToDo","handleDelete","key","handleDone","_this2","this","props","react_default","a","createElement","onClick","React","Component","connect","_ref","toDoListReducer","toDoList","map","index","components_ToDo","App","state","handleInput","event","_event$target","target","name","value","_this","setState","Object","defineProperty","handleSubmit","preventDefault","className","src","logo","alt","onSubmit","onChange","containers_ToDoList","dispatch","bindActionCreators","Boolean","window","location","hostname","match","initialState","combineReducers","arguments","length","undefined","action","toConsumableArray","concat","store","createStore","rootReducer","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8QCE3BC,EAAc,SAAAC,GACzB,MAAO,CACLC,KCJyB,gBDKzBC,QAASF,IEaEG,oNAfXC,aAAe,SAAAC,OAEfC,WAAa,SAAAD,6EAEL,IAAAE,EAAAC,KACIH,EAAOG,KAAKC,MAAZJ,IACR,OACIK,EAAAC,EAAAC,cAAA,UACKJ,KAAKC,MAAMT,KACZU,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMN,EAAKD,eAA5B,gBACAI,EAAAC,EAAAC,cAAA,UAAQC,QAAU,kBAAKN,EAAKH,aAAaC,KAAzC,kBAXGS,IAAMC,YCeVC,cAJS,SAAAC,GACpB,MAAO,CAAEC,gBADoCD,EAAtBC,kBAIZF,CAbE,SAAAP,GACb,OACIC,EAAAC,EAAAC,cAAA,UACKH,EAAMS,gBAAgBC,SAASC,IAAI,SAACD,EAAUE,GAAX,OAChCX,EAAAC,EAAAC,cAACU,EAAD,CAAMjB,IAAKgB,EAAOrB,KAAMmB,SCDlCI,6MACJC,MAAQ,CACNxB,KAAM,MAGRyB,YAAc,SAAAC,GAAS,IAAAC,EACGD,EAAME,OAAtBC,EADaF,EACbE,KAAMC,EADOH,EACPG,MACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAOC,OAG1BK,aAAe,SAAAT,GACbA,EAAMU,iBACNL,EAAKtB,MAAMV,YAAYgC,EAAKP,MAAMxB,MAClC+B,EAAKC,SAAS,CAAEhC,KAAM,8EAGtB,OACEU,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACb3B,EAAAC,EAAAC,cAAA,UAAQyB,UAAU,cAChB3B,EAAAC,EAAAC,cAAA,OAAK0B,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC9B,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,QAAM6B,SAAUjC,KAAK2B,cACnBzB,EAAAC,EAAAC,cAAA,SACEiB,KAAK,OACLC,MAAOtB,KAAKgB,MAAMxB,KAClB0C,SAAUlC,KAAKiB,cAEjBf,EAAAC,EAAAC,cAAA,UAAQX,KAAK,UAAb,WAEFS,EAAAC,EAAAC,cAAC+B,EAAD,eA7BQ5B,aA2CHC,cACb,KATyB,SAAA4B,GACzB,OAAOC,YACL,CACE9C,eAEF6C,IAGW5B,CAGbO,GCzCkBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECjBAC,EAAe,CACnBhC,SAAS,ICCIiC,cAAgB,CAC7BlC,gBDA6B,WAAkC,IAAjCM,EAAiC6B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAG/D,OADgBC,EAARvD,MAEN,ILRyB,gBKQL,MAAO,CACzBkB,SAASc,OAAAwB,EAAA,EAAAxB,CAAKT,EAAML,UAAZuC,OAAA,CAAqBF,EAAOtD,WAEtC,QACE,OAAOsB,MEHPmC,EAAQC,YAAYC,GAE1BC,IAASC,OACPrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAUL,MAAOA,GACfjD,EAAAC,EAAAC,cAACqD,EAAD,OAEFC,SAASC,eAAe,SHkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.01f3c217.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {ADD_TODO_LIST} from \"../constant/toDoList\"\n\nexport const addToDoList = toDo => {\n  return {\n    type: ADD_TODO_LIST,\n    payload: toDo\n  };\n};\n","export const ADD_TODO_LIST = \"ADD_TODO_LIST\";\n","import React from \"react\";\n\nclass ToDo extends React.Component {\n    handleDelete = key => {};\n\n    handleDone = key =>{};\n\n    render(){\n        const { key } =this.props;\n        return (\n            <li>\n                {this.props.toDo}\n                <button onClick={() => this.handleDone()}>Mark As Done</button>\n                <button onClick={ ()=> this.handleDelete(key)}>Delete</button>\n            </li>\n        );\n    }\n}\nexport default ToDo;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ToDo from \"../components/ToDo\";\n\nconst ToDoList = props => {\n    return (\n        <ul>\n            {props.toDoListReducer.toDoList.map((toDoList, index) => (\n                <ToDo key={index} toDo={toDoList} />\n            ))}\n        </ul>\n    );\n}\nconst mapStateToProps = ({ toDoListReducer }) => {\n    return { toDoListReducer };\n}\n\nexport default connect(mapStateToProps)(ToDoList);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport logo from \"./logo.svg\";\nimport { bindActionCreators } from \"redux\";\nimport { addToDoList } from \"./actions/toDoList\";\nimport \"./App.css\";\nimport ToDoList from \"./containers/ToDoList\";\nclass App extends Component {\n  state = {\n    toDo: \"\"\n  };\n\n  handleInput = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.addToDoList(this.state.toDo);\n    this.setState({ toDo: \"\" });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>To Do List</h1>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              name=\"toDo\"\n              value={this.state.toDo}\n              onChange={this.handleInput}\n            />\n            <button type=\"submit\">Submit</button>\n          </form>\n          <ToDoList />\n        </header>\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      addToDoList\n    },\n    dispatch\n  );\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TODO_LIST } from \"../constant/toDoList\"\nconst initialState = {\n  toDoList:[]\n};\nexport const toDoListReducer = (state = initialState, action) => {\n\n  const { type} = action;\n  switch(type) {\n    case ADD_TODO_LIST: return {\n      toDoList: [...state.toDoList,action.payload]\n    };\n    default:\n      return state\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { toDoListReducer } from \"./todoList\";\n\nexport default combineReducers({\n  toDoListReducer\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}